{"scoring":"There are some subtasks in this problem, you will get the percentage of score if you pass the subtask\r\n\r\n\\begin{center}\r\n  \\begin{tabular}{ | c | c | c | c | } \\hline\r\n    \\bf{Subtask} &\r\n    \\bf{Condition} &\r\n    \\bf{Score} &\r\n    \\bf{Additional Limitations} \\\\ \\hline\r\n    $1$ & $n \\le 10$ & $20\\%$ & None \\\\ \\hline\r\n    $2$ & $n \\le 100$ & $20\\%$ & Must pass Subtask 1 \\\\ \\hline\r\n    $3$ & $n \\le 1000$ & $20\\%$ & Must pass Subtask 1, 2 \\\\ \\hline\r\n    $4$ & $n \\le 10^4$ & $20\\%$ & Must pass Subtask 1, 2, 3 \\\\ \\hline\r\n    $5$ & $n \\le 10^6$ & $20\\%$ & Must pass Subtask 1, 2, 3, 4 \\\\ \\hline\r\n    \\end{tabular}\r\n\\end{center}","notes":"The subarray [3, -2, 5, 3] gives the maximum sum, which is 9. ","legend":"\\textbf{This problem will not be graded for Homework 1} \r\n\r\nIn algorithmic studies, we often focus on understanding how an algorithm works and analyzing its theoretical time complexity. However, in real-world applications, what really matters is the actual size of the data and the time constraints within which the algorithm must execute.\r\n\r\nA widely accepted rule of thumb for estimating execution time, particularly on personal computers and online coding platforms, is that approximately $10^8$ operations take around 1 second.\r\n\r\nSo, if an algorithm runs in $O(n)$ time, and $n \\le 10^8$, you can generally expect it to complete in under 1 second. However, this estimate can vary depending on the programming language and the specific hardware running the code.\r\n\r\nGiven an array of length $n$, your task is to find and output the maximum sum of any contiguous subarray within it. Note that the empty subarray is considered and has a sum of 0. Once you've implemented your solution, evaluate its time complexity to ensure it meets the real-world time constraints mentioned above.\r\n\r\n\\textbf{Hint: } For this problem, your grade will depend on the efficiency of your algorithm. If you implement an $O(n^3)$ algorithm, you will receive 60\\%. If you manage to optimize it to $O(n^2)$, you'll receive 80\\%. Achieving a solution with $O(n)$ time complexity will earn you 100\\%. However, this problem is ungraded, so feel free to experiment and try out different approaches without worrying about the final grade.\r\n","authorLogin":"slee","language":"english","timeLimit":1000,"output":"Output a single integer, indicating the maximum sum. Note that empty subarrays are valid and they have a sum of 0.","inputFile":"stdin","outputFile":"stdout","input":"The first line contains a positive integer $n$\r\n\r\nThe second line contains $n$ integers $a_1, \\cdots, a_n$. For all $i$, $-100 \\leq a_i \\leq 100$.","authorName":"Sam Lee","sampleTests":[{"output":"9\r\n","input":"8\r\n-1 3 -2 5 3 -5 2 2\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"Introduction to Time Complexity ","interaction":null,"memoryLimit":268435456,"tutorial":""}