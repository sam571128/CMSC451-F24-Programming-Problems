{"extraResources":{"example.01.mu":"TVXzATcNCjYgMSAyDQoyIDMgNA0KNyA1IDYNCjUgLTEgLTENCjMgLTEgLTENCjQgLTEgLTENCjEgLTEgLTENCjExDQo="},"scoring":null,"notes":"$1 \\leq n \\leq 1,000$\r\n\r\n$1 \\leq k \\leq 100,000$\r\n\r\n$\\forall i \\in [0, n), -100 \\leq c_i \\leq 100$\r\n\r\nThe values $c_i$ are not guaranteed to be unique.\r\n\r\nFor test cases 1--80, you may assume the tree is balanced.\r\n\r\nFor test cases 1--40, you may further assume that $n \\leq 100$.\r\n\r\nFor test cases 81--100, you may make neither of these assumptions.\r\n\r\nYou should aim for a runtime of $O(n^2)$ or better.","legend":"You are given a rooted binary tree with $n$ nodes (that is, each node has at most 2 children). Each node has a value attached to it. Given a query $k$, you are asked to count the number of simple paths whose values sum to exactly $k$.\r\n\r\nFor simplicity, we will consider a path to be valid in this context if it starts at some node and only moves down the tree. A path is not required to start at the root nor end at a leaf. For example, consider the following binary tree.\r\n\r\n\\begin{center}\r\n\\includegraphics{example_binary_tree.png}\r\n\\end{center}\r\n\r\n\\textbf{6-2-3} would be considered a valid path, as would \\textbf{6-7}, \\textbf{2-5}, and even \\textbf{4}. However, \\textbf{4-7-1} is not a valid path because it goes up and then down. Nor would any paths which double back on themselves like \\textbf{6-7-1-7}. We are also not considering the empty path to be valid.","authorLogin":"rwen","language":"english","timeLimit":500,"output":"A single integer representing the number of paths whose values sum to $k$.","inputFile":"stdin","outputFile":"stdout","input":"The first line contains a single integer $n$, the number of nodes in the tree. Let's call the nodes $v_0, v_1, \\dots, v_{n-1}$. $v_0$ is guaranteed to be the root of the tree.\r\n\r\nThe next $n$ lines $L_0, L_1, \\dots, L_{n-1}$ each contain three values $c_i$, $l_i$, and $r_i$. $c_i$ is the value of $v_i$. $l_i$ and $r_i$ are the indices of the children of $v_i$. That is, $v_i$'s left child is $v_{l_i}$, and its right child is $v_{r_i}$. If $l_i$ or $r_i$ is -1, then that means $v_i$ has no left or right child, respectively.\r\n\r\nThe final line contains a single integer $k$, the sum you are querying for.","authorName":"Richard Wen","sampleTests":[{"output":"2\r\n","input":"7\r\n6 1 2\r\n2 3 4\r\n7 5 6\r\n5 -1 -1\r\n3 -1 -1\r\n4 -1 -1\r\n1 -1 -1\r\n11\r\n","inputFile":"example.01","outputFile":"example.01.a"}],"name":"Path Sums","interaction":null,"memoryLimit":268435456,"tutorial":""}